import { Tokens } from "./tokenManager";
export interface IStorageComponent {
    isEmpty(): boolean;
    setTokens(auth: string, tokens: Tokens, defaults?: boolean): void;
    getTokens(auth?: string): Tokens;
    setDefault(auth: string): void;
    clear(): void;
}
export declare class WebStorageComponent implements IStorageComponent {
    private readonly storageKey;
    private readonly defaultKey;
    private storage;
    private readonly tokens;
    constructor(remember: boolean, window: any);
    isEmpty(): boolean;
    setDefault(auth: string): void;
    setTokens(auth: string, tokens: Tokens, defaults?: boolean): void;
    getTokens(auth?: string): Tokens;
    clear(): void;
}
export declare class MemoryStorageComponent implements IStorageComponent {
    private tokens;
    private defaultTokens;
    isEmpty(): boolean;
    setDefault(auth: string): void;
    setTokens(auth: string, tokens: Tokens, defaults?: boolean): void;
    getTokens(auth?: string): Tokens;
    clear(): void;
}
export declare class TokenStorage {
    static getStorageAPI(): IStorageComponent;
    static setStorageAPI(storage: IStorageComponent): void;
    private static storage;
    constructor();
}
