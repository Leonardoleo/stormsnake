"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var executer_1 = require("../../internal/executer");
var client_1 = require("../core/client");
var tokenManager_1 = require("../core/tokenManager");
var fileops_interfaces_1 = require("./fileops.interfaces");
var fileset_1 = require("./fileset");
var fileUploader_1 = require("./fileUploader");
var defaultConfiguration = {
    uploadWaitForCompleted: false,
    uploadTimeout: 120000
};
var FileOperationsModule = (function () {
    function FileOperationsModule(formData, config) {
        this.formData = formData;
        this.config = Object.assign(defaultConfiguration, config);
    }
    FileOperationsModule.prototype.init = function (coreInjector) {
        this.injector = coreInjector.resolveAndCreateChild([
            executer_1.RequestExecuter,
        ]);
        if (this.config.uploadWaitForCompleted) {
            var isRTCModuleActive = Boolean(this.injector.get(client_1.ClientConfiguration).rtc);
            if (!isRTCModuleActive) {
                return Promise.reject("RTC module needs to be activated for automatic file uploading subscription");
            }
        }
        return Promise.resolve(this);
    };
    FileOperationsModule.prototype.getConfig = function () {
        return { fileOperations: this.config };
    };
    FileOperationsModule.prototype.fileset = function (fileset, auth) {
        var config = this.injector.get(tokenManager_1.AuthOptions);
        if (auth) {
            config.auth = auth;
        }
        var injector = this.injector.resolveAndCreateChild([
            {
                provide: fileops_interfaces_1.FilesetName,
                useValue: fileset,
            },
            {
                provide: tokenManager_1.AuthOptions,
                useValue: config,
            },
            fileUploader_1.FileUploader,
            fileset_1.Fileset,
        ]);
        injector.get(fileUploader_1.FileUploader).provideFormData(this.formData);
        return injector.get(fileset_1.Fileset);
    };
    FileOperationsModule.prototype.filesets = function (filesets, auth) {
        var _this = this;
        return filesets.map(function (fileset) { return _this.fileset(fileset, auth); });
    };
    FileOperationsModule.prototype.terminate = function () {
        return Promise.resolve(this);
    };
    return FileOperationsModule;
}());
exports.FileOperationsModule = FileOperationsModule;
