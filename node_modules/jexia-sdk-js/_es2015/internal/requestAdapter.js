import { from } from "rxjs";
import { map, switchMap, tap } from "rxjs/operators";
import { Logger } from "../api/logger/logger";
import { RequestMethod } from "./requestAdapter.interfaces";
export class RequestAdapter {
    constructor(fetch) {
        this.fetch = fetch;
        this.logger = new Logger();
    }
    provideLogger(logger) {
        this.logger = logger;
    }
    execute(uri, opt) {
        let logMessage = `(REQUEST) ${opt.method} ${uri} ${JSON.stringify(opt)}\n`;
        const requestOptions = {
            body: JSON.stringify(opt.body),
            headers: opt.headers,
            method: opt.method
        };
        return from(this.fetch(uri, requestOptions)).pipe(tap((response) => {
            logMessage += `(RESPONSE) ${response.status} ${response.statusText}`;
            this.logger.debug("RequestAdapter", logMessage);
        }), switchMap((response) => this.handleResponse(response, opt)));
    }
    upload(uri, headers, body) {
        let logMessage = `(REQUEST) UPLOAD ${uri}\n`;
        return from(this.fetch(uri, { body, headers, method: RequestMethod.POST })).pipe(tap((response) => {
            logMessage += `(RESPONSE) ${response.status} ${response.statusText}`;
            this.logger.debug("RequestAdapter", logMessage);
        }), switchMap((response) => this.handleResponse(response, { body, headers, method: RequestMethod.POST })));
    }
    handleResponse(response, request) {
        return from(response.text()).pipe(map((responseBody) => {
            if (response.ok) {
                return responseBody ? JSON.parse(responseBody) : {};
            }
            throw Object.assign(Object.assign({}, this.fetchErrorMessage(responseBody)), { request, httpStatus: {
                    code: response.status,
                    status: response.statusText
                } });
        }));
    }
    fetchErrorMessage(body) {
        let id = "";
        let message;
        try {
            const [parsedBody] = JSON.parse(body);
            if (parsedBody.request_id) {
                id = parsedBody.request_id;
            }
            message = parsedBody.message || parsedBody;
        }
        catch (_) {
            message = body;
        }
        return { id, message };
    }
}
export * from "./requestAdapter.interfaces";
