import { ReflectiveInjector } from "injection-js";
import { Observable } from "rxjs";
import { IFilteringCriterion, IFilteringCriterionCallback } from "../core/filteringApi";
import { IWebSocket, RealTimeCommandResponse, RealTimeEventMessage, RealTimeStoredMessage } from "./realTime.interfaces";
export declare class Channel<T = any> extends Observable<RealTimeEventMessage<T>> {
    readonly injector: ReflectiveInjector;
    readonly websocketFactory: () => IWebSocket;
    readonly name: string;
    constructor(injector: ReflectiveInjector, websocketFactory: () => IWebSocket, name: string);
    publish(data: any): Observable<RealTimeCommandResponse>;
    getLog(filter?: IFilteringCriterion<T> | IFilteringCriterionCallback<T>): Observable<RealTimeStoredMessage[]>;
}
