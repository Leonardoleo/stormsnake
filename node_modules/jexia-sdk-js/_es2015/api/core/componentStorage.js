export class WebStorageComponent {
    constructor(remember, window) {
        this.storageKey = "__jexia_tokens__";
        this.defaultKey = "__default_auth__";
        this.storage = remember ? window.localStorage : window.sessionStorage;
    }
    get tokens() {
        let tokens;
        try {
            tokens = JSON.parse(this.storage.getItem(this.storageKey));
        }
        catch (_a) {
            tokens = {};
        }
        return tokens || {};
    }
    isEmpty() {
        return !this.tokens.length;
    }
    setDefault(auth) {
        this.storage.setItem(this.defaultKey, auth);
    }
    setTokens(auth, tokens, defaults = false) {
        const storedTokens = this.tokens;
        storedTokens[auth] = tokens;
        this.storage.setItem(this.storageKey, JSON.stringify(storedTokens));
        if (defaults || Object.keys(storedTokens).length === 1) {
            this.setDefault(auth);
        }
    }
    getTokens(auth) {
        auth = auth || this.storage.getItem(this.defaultKey);
        return this.tokens[auth];
    }
    clear() {
        this.storage.removeItem(this.storageKey);
    }
}
export class MemoryStorageComponent {
    constructor() {
        this.tokens = {};
    }
    isEmpty() {
        return !Object.keys(this.tokens).length;
    }
    setDefault(auth) {
        this.defaultTokens = auth;
    }
    setTokens(auth, tokens, defaults = false) {
        this.tokens[auth] = tokens;
        if (defaults || Object.keys(this.tokens).length === 1) {
            this.setDefault(auth);
        }
    }
    getTokens(auth) {
        auth = auth || this.defaultTokens;
        return this.tokens[auth];
    }
    clear() {
        this.tokens = {};
    }
}
export class TokenStorage {
    constructor() {
        if (TokenStorage.storage) {
            throw new Error("Use TokenStorage.getStorageAPI() instead of new");
        }
        else {
            TokenStorage.storage = new MemoryStorageComponent();
        }
    }
    static getStorageAPI() {
        return TokenStorage.storage;
    }
    static setStorageAPI(storage) {
        TokenStorage.storage = storage;
    }
}
TokenStorage.storage = new MemoryStorageComponent();
