import { RequestExecuter } from "../../internal/executer";
import { IFilteringCriterion, IFilteringCriterionCallback } from "../core/filteringApi";
import { ActionQuery } from "../core/queries/actionQuery";
import { DeleteQuery } from "../core/queries/deleteQuery";
import { InsertQuery } from "../core/queries/insertQuery";
import { SelectQuery } from "../core/queries/selectQuery";
import { UpdateQuery } from "../core/queries/updateQuery";
import { IdentityCollection, IResource, ResourceInterface, ResourceType } from "../core/resource";
export declare class Dataset<T extends object = any, D extends ResourceInterface<T> = ResourceInterface<T>> implements IResource {
    private datasetName;
    private requestExecuter;
    readonly resourceType: ResourceType;
    constructor(datasetName: string, requestExecuter: RequestExecuter);
    readonly name: string;
    select(): SelectQuery<D>;
    update(data: T): UpdateQuery<T>;
    insert(data: Array<Partial<D>> | Partial<D>): InsertQuery<D>;
    delete(): DeleteQuery<D>;
    attach(resourceName: string, filter: IFilteringCriterion<D> | IFilteringCriterionCallback<D> | IdentityCollection<D>): ActionQuery<T, D>;
    detach(resourceName: string, filter: IFilteringCriterion<D> | IFilteringCriterionCallback<D> | IdentityCollection<D>): ActionQuery<T, D>;
}
