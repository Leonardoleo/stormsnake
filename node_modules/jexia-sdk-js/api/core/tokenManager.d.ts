import { InjectionToken } from "injection-js";
import { Observable } from "rxjs";
import { RequestAdapter } from "../../internal/requestAdapter";
import { Logger } from "../logger/logger";
export declare type Tokens = {
    access_token: string;
    refresh_token: string;
};
export interface IAuthOptions {
    readonly projectID: string;
    auth?: string;
    readonly key?: string;
    readonly secret?: string;
    readonly refreshInterval?: number;
    readonly remember?: boolean;
}
export declare const AuthOptions: InjectionToken<IAuthOptions>;
export declare class TokenManager {
    private requestAdapter;
    private logger;
    private projectId;
    private refreshes;
    private initPromise;
    private defers;
    private readonly resolved;
    private storage;
    constructor(requestAdapter: RequestAdapter, logger: Logger);
    token(auth?: string): Observable<string>;
    init(opts: IAuthOptions): Promise<TokenManager>;
    terminate(): void;
    setDefault(auth: string): void;
    resetDefault(): void;
    addTokens(aliases: Array<string | undefined>, tokens: Tokens, defaults?: boolean): void;
    private startRefreshDigest;
    private login;
    private refresh;
    private obtainTokens;
    private readonly url;
    private readonly authUrl;
    private readonly refreshUrl;
}
