import { RequestMethod } from "../../../internal/requestAdapter.interfaces";
import { field } from "../filteringApi";
import { FilterableQuery } from "./filterableQuery";
export class ActionQuery extends FilterableQuery {
    constructor(queryExecuter, resourceType, resourceName, actionResourceName, queryActionType, filter) {
        super(queryExecuter, RequestMethod.PUT, resourceType, resourceName);
        this.queryActionType = queryActionType;
        this.query.setAction(queryActionType, actionResourceName, this.getFilter(filter));
    }
    getFilter(filter) {
        if (!Array.isArray(filter)) {
            return filter;
        }
        const idCollection = filter;
        const hasInvalidIds = () => idCollection.some((o) => !o || typeof o === "object" && !o.id);
        const hasMixedData = () => new Set(idCollection.map((o) => typeof o)).size > 1;
        if (hasInvalidIds() || hasMixedData()) {
            throw Error("Invalid resource or id list: " + idCollection);
        }
        const hasOnlyIds = idCollection.every((o) => typeof o === "string");
        const ids = hasOnlyIds ? idCollection : idCollection.map((c) => c.id);
        return field("id").isInArray(ids);
    }
}
