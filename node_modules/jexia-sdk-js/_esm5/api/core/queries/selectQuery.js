var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { MESSAGE } from "../../../config/message";
import { RequestMethod } from "../../../internal/requestAdapter.interfaces";
import { FilterableQuery } from "./filterableQuery";
import { RelatedQuery } from "./relatedQuery";
var SelectQuery = (function (_super) {
    __extends(SelectQuery, _super);
    function SelectQuery(queryExecuter, resourceType, resourceName) {
        return _super.call(this, queryExecuter, RequestMethod.GET, resourceType, resourceName) || this;
    }
    SelectQuery.prototype.limit = function (limit) {
        this.query.limit = limit;
        return this;
    };
    SelectQuery.prototype.offset = function (offset) {
        this.query.offset = offset;
        return this;
    };
    SelectQuery.prototype.sortAsc = function (field) {
        var _a;
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fields[_i - 1] = arguments[_i];
        }
        if (!field || field.length === 0) {
            throw new Error(MESSAGE.QUERY.MUST_PROVIDE_SORTING_FIELD);
        }
        (_a = this.query).addSortCondition.apply(_a, __spreadArrays(["asc"], (Array.isArray(field) ? field : field && __spreadArrays([field], fields))));
        return this;
    };
    SelectQuery.prototype.sortDesc = function (field) {
        var _a;
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fields[_i - 1] = arguments[_i];
        }
        if (!field || field.length === 0) {
            throw new Error(MESSAGE.QUERY.MUST_PROVIDE_SORTING_FIELD);
        }
        (_a = this.query).addSortCondition.apply(_a, __spreadArrays(["desc"], (Array.isArray(field) ? field : field && __spreadArrays([field], fields))));
        return this;
    };
    SelectQuery.prototype.related = function (resourceName, callback) {
        var _this = this;
        if (callback === void 0) { callback = function (related) {
            _this.query.fields.push(resourceName);
            return related;
        }; }
        callback(new RelatedQuery(resourceName, this.query));
        return this;
    };
    return SelectQuery;
}(FilterableQuery));
export { SelectQuery };
