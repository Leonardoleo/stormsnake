import { Observable } from "rxjs";
import { RequestExecuter } from "../../internal/executer";
import { IFilteringCriterion, IFilteringCriterionCallback } from "../core/filteringApi";
import { ActionQuery } from "../core/queries/actionQuery";
import { DeleteQuery } from "../core/queries/deleteQuery";
import { SelectQuery } from "../core/queries/selectQuery";
import { UpdateQuery } from "../core/queries/updateQuery";
import { IdentityCollection, IResource, ResourceType } from "../core/resource";
import { FileOperationsConfig, FilesetInterface, IFormData } from "../fileops/fileops.interfaces";
import { FileUploader } from "../fileops/fileUploader";
import { FilesetMultipart } from "./fileops.interfaces";
export declare class Fileset<FormDataType extends IFormData<F>, T, D, F> implements IResource {
    private filesetName;
    private clientConfig;
    private fileUploader;
    private requestExecuter;
    readonly resourceType: ResourceType;
    constructor(filesetName: string, clientConfig: {
        fileOperations: FileOperationsConfig;
    }, fileUploader: FileUploader<FormDataType, T, F>, requestExecuter: RequestExecuter);
    readonly name: string;
    upload(files: Array<FilesetMultipart<T, F>>): Observable<FilesetInterface<T>>;
    select(): SelectQuery<D>;
    update(data: T): UpdateQuery<T>;
    insert(): never;
    delete(): DeleteQuery<FilesetInterface<T>>;
    attach(resourceName: string, filter: IFilteringCriterion<FilesetInterface<T>> | IFilteringCriterionCallback<FilesetInterface<T>> | IdentityCollection<FilesetInterface<T>>): ActionQuery<T, FilesetInterface<T>>;
    detach(resourceName: string, filter: IFilteringCriterion<FilesetInterface<T>> | IFilteringCriterionCallback<FilesetInterface<T>> | IdentityCollection<FilesetInterface<T>>): ActionQuery<T, FilesetInterface<T>>;
    private getFileUpdates;
}
