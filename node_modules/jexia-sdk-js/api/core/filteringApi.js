"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var filteringCondition_1 = require("./filteringCondition");
var FieldFilter = (function () {
    function FieldFilter(fieldName) {
        this.fieldName = fieldName;
    }
    FieldFilter.prototype.isGreaterThan = function (value) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, ">", value));
    };
    FieldFilter.prototype.isLessThan = function (value) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "<", value));
    };
    FieldFilter.prototype.isEqualTo = function (value) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "=", value));
    };
    FieldFilter.prototype.isDifferentFrom = function (value) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "!=", value));
    };
    FieldFilter.prototype.isEqualOrGreaterThan = function (value) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, ">=", value));
    };
    FieldFilter.prototype.isEqualOrLessThan = function (value) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "<=", value));
    };
    FieldFilter.prototype.isNull = function () {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "null", true));
    };
    FieldFilter.prototype.isNotNull = function () {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "null", false));
    };
    FieldFilter.prototype.isInArray = function (values) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "in", values));
    };
    FieldFilter.prototype.isNotInArray = function (values) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "not in", values));
    };
    FieldFilter.prototype.isLike = function (value) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "like", value));
    };
    FieldFilter.prototype.satisfiesRegexp = function (regexp) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "regex", regexp));
    };
    FieldFilter.prototype.isBetween = function (start, end) {
        return new FilteringCriterion(new filteringCondition_1.FilteringCondition(this.fieldName, "between", [start, end]));
    };
    return FieldFilter;
}());
exports.FieldFilter = FieldFilter;
var FilteringCriterion = (function () {
    function FilteringCriterion(lowLevelCondition, highLevelCriteria) {
        if (lowLevelCondition) {
            this.lowLevelCondition = lowLevelCondition;
        }
        if (highLevelCriteria) {
            this.lowLevelCondition = new filteringCondition_1.CompositeFilteringCondition(highLevelCriteria.lowLevelCondition, "and");
        }
        if (!this.lowLevelCondition) {
            throw new Error("No information was given when constructing a FilteringCriterion.");
        }
    }
    Object.defineProperty(FilteringCriterion.prototype, "condition", {
        get: function () {
            return this.lowLevelCondition;
        },
        enumerable: true,
        configurable: true
    });
    FilteringCriterion.prototype.and = function (conditionToAdd) {
        return new FilteringCriterion(this.lowLevelCondition.and(conditionToAdd.lowLevelCondition));
    };
    FilteringCriterion.prototype.or = function (conditionToAdd) {
        return new FilteringCriterion(this.lowLevelCondition.or(conditionToAdd.lowLevelCondition));
    };
    return FilteringCriterion;
}());
exports.FilteringCriterion = FilteringCriterion;
function field(name) {
    return new FieldFilter(name);
}
exports.field = field;
function combineCriteria(criteria) {
    return new FilteringCriterion(undefined, criteria);
}
exports.combineCriteria = combineCriteria;
function toFilteringCriterion(filter) {
    return typeof filter === "function"
        ? filter(function (f) { return new FieldFilter(f); })
        : filter;
}
exports.toFilteringCriterion = toFilteringCriterion;
