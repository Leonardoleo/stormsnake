import { ReflectiveInjector } from "injection-js";
import { IModule, ModuleConfiguration } from "../core/module";
import { Dataset } from "./dataset";
export declare class DataOperationsModule implements IModule {
    private injector;
    init(coreInjector: ReflectiveInjector): Promise<this>;
    getConfig(): {
        [moduleName: string]: ModuleConfiguration;
    };
    dataset<T extends object = any>(dataset: string, auth?: string): Dataset<T>;
    datasets<A extends {}, B extends {}>(datasets: [string, string], auth?: string): [Dataset<A>, Dataset<B>];
    datasets<A extends {}, B extends {}, C extends {}>(datasets: [string, string, string], auth?: string): [Dataset<A>, Dataset<B>, Dataset<C>];
    datasets<A extends {}, B extends {}, C extends {}, D extends {}>(datasets: [string, string, string, string], auth?: string): [Dataset<A>, Dataset<B>, Dataset<C>, Dataset<D>];
    datasets<A extends {}, B extends {}, C extends {}, D extends {}, E extends {}>(datasets: [string, string, string, string, string], auth?: string): [Dataset<A>, Dataset<B>, Dataset<C>, Dataset<D>, Dataset<E>];
    datasets<A extends {}, B extends {}, C extends {}, D extends {}, E extends {}, F extends {}>(datasets: [string, string, string, string, string, string], auth?: string): [Dataset<A>, Dataset<B>, Dataset<C>, Dataset<D>, Dataset<E>, Dataset<F>];
    datasets(datasets: string[], auth?: string): Dataset[];
    terminate(): Promise<this>;
}
