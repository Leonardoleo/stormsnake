var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Inject, Injectable } from "injection-js";
import { merge } from "rxjs";
import { map, switchMap } from "rxjs/operators";
import { API } from "../../config";
import { RequestAdapter } from "../../internal/requestAdapter";
import { AuthOptions, TokenManager } from "../core/tokenManager";
import { FilesetName } from "./fileops.interfaces";
let FileUploader = class FileUploader {
    constructor(config, filesetName, tokenManager, requestAdapter) {
        this.config = config;
        this.filesetName = filesetName;
        this.tokenManager = tokenManager;
        this.requestAdapter = requestAdapter;
    }
    provideFormData(formData) {
        this.formData = this.resetFormData(formData);
    }
    upload(files) {
        return merge(...files.map((file) => this.uploadFile(file)));
    }
    uploadFile(record) {
        const formData = this.resetFormData();
        formData.append("data", record.data ? JSON.stringify(record.data) : "{}");
        if (record.file) {
            formData.append("file", record.file);
        }
        return this.tokenManager.token(this.config.auth).pipe(switchMap((token) => this.execute(token, formData)), map(([uploaded]) => uploaded));
    }
    execute(token, formData) {
        const headers = {
            Authorization: `Bearer ${token}`,
        };
        if (formData.getHeaders) {
            Object.assign(headers, formData.getHeaders());
        }
        return this.requestAdapter.upload(this.getUrl(), headers, formData);
    }
    ;
    getUrl() {
        return [
            `${API.PROTOCOL}://${this.config.projectID}.${API.HOST}.${API.DOMAIN}:${API.PORT}`,
            API.FILES.ENDPOINT,
            this.filesetName,
        ].join("/");
    }
    resetFormData(formData = this.formData) {
        return new formData.constructor();
    }
};
FileUploader = __decorate([
    Injectable(),
    __param(0, Inject(AuthOptions)),
    __param(1, Inject(FilesetName)),
    __metadata("design:paramtypes", [Object, String, TokenManager,
        RequestAdapter])
], FileUploader);
export { FileUploader };
