var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Inject, Injectable } from "injection-js";
import { Observable, Subject } from "rxjs";
import { concatMap, filter, map, shareReplay, takeUntil, tap } from "rxjs/operators";
import { RequestExecuter } from "../../internal/executer";
import { QueryActionType } from "../../internal/utils";
import { ClientConfiguration } from "../core/client";
import { ActionQuery } from "../core/queries/actionQuery";
import { DeleteQuery } from "../core/queries/deleteQuery";
import { SelectQuery } from "../core/queries/selectQuery";
import { UpdateQuery } from "../core/queries/updateQuery";
import { ResourceType } from "../core/resource";
import { FilesetName, IFileStatus } from "../fileops/fileops.interfaces";
import { FileUploader } from "../fileops/fileUploader";
let Fileset = class Fileset {
    constructor(filesetName, clientConfig, fileUploader, requestExecuter) {
        this.filesetName = filesetName;
        this.clientConfig = clientConfig;
        this.fileUploader = fileUploader;
        this.requestExecuter = requestExecuter;
        this.resourceType = ResourceType.Fileset;
    }
    get name() {
        return this.filesetName;
    }
    upload(files) {
        const fileUploadObservable = this.fileUploader.upload(files);
        if (this.clientConfig.fileOperations.uploadWaitForCompleted) {
            return this.getFileUpdates(fileUploadObservable, files.length);
        }
        return fileUploadObservable;
    }
    select() {
        return new SelectQuery(this.requestExecuter, ResourceType.Fileset, this.filesetName);
    }
    update(data) {
        return new UpdateQuery(this.requestExecuter, data, ResourceType.Fileset, this.filesetName);
    }
    insert() {
        throw new Error("Fileset does not have INSERT, please use upload() instead");
    }
    delete() {
        return new DeleteQuery(this.requestExecuter, ResourceType.Fileset, this.filesetName);
    }
    attach(resourceName, filter) {
        return new ActionQuery(this.requestExecuter, this.resourceType, this.filesetName, resourceName, QueryActionType.ATTACH, filter);
    }
    detach(resourceName, filter) {
        return new ActionQuery(this.requestExecuter, this.resourceType, this.filesetName, resourceName, QueryActionType.DETACH, filter);
    }
    getFileUpdates(uploadingProcess, filesUploaded) {
        let filesCompleted = 0;
        const allFilesCompleted = new Subject();
        const sharedUploadingProcess = uploadingProcess.pipe(shareReplay());
        const watcher = this.watch().pipe(takeUntil(allFilesCompleted), filter((event) => event.action === "updated"), concatMap((event) => sharedUploadingProcess.pipe(filter((fileRecord) => fileRecord.id === event.data[0].id), map((fileRecord) => {
            fileRecord.status = IFileStatus.COMPLETED;
            filesCompleted++;
            return fileRecord;
        }))), tap(() => {
            if (filesCompleted === filesUploaded) {
                allFilesCompleted.next();
                allFilesCompleted.complete();
            }
        }));
        return Observable.create((subscriber) => {
            const watcherSubscription = watcher.subscribe(subscriber);
            sharedUploadingProcess.subscribe();
            return () => watcherSubscription.unsubscribe();
        });
    }
};
Fileset = __decorate([
    Injectable(),
    __param(0, Inject(FilesetName)),
    __param(1, Inject(ClientConfiguration)),
    __metadata("design:paramtypes", [String, Object, FileUploader,
        RequestExecuter])
], Fileset);
export { Fileset };
