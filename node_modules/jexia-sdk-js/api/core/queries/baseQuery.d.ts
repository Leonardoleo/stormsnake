import { Observable } from "rxjs";
import { RequestExecuter } from "../../../internal/executer";
import { IAggField, Query } from "../../../internal/query";
import { RequestMethod } from "../../../internal/requestAdapter.interfaces";
import { ResourceType } from "../resource";
export declare abstract class BaseQuery<T, D extends T = any> extends Observable<T[]> {
    protected queryExecuter: RequestExecuter;
    protected readonly method: RequestMethod;
    protected readonly resourceType: ResourceType;
    protected readonly resourceName: string;
    protected query: Query<T>;
    protected abstract readonly body: T | T[] | D | D[] | null;
    protected constructor(queryExecuter: RequestExecuter, method: RequestMethod, resourceType: ResourceType, resourceName: string);
    fields(fields: Array<Extract<keyof T, string> | IAggField<T>>): this;
    fields(...fields: Array<Extract<keyof T, string> | IAggField<T>>): this;
    private readonly compiledRequest;
}
