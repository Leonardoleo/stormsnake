"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./index"));
var client_1 = require("./api/core/client");
var componentStorage_1 = require("./api/core/componentStorage");
var dataOperationsModule_1 = require("./api/dataops/dataOperationsModule");
var fileOperationsModule_1 = require("./api/fileops/fileOperationsModule");
var public_api_1 = require("./api/logger/public-api");
var realTimeModule_1 = require("./api/realtime/realTimeModule");
function storageAvailable(type) {
    var storage = type === "localStorage" ? window.localStorage : window.sessionStorage;
    var testString = "test";
    try {
        storage.setItem(testString, testString);
        storage.getItem(testString);
        storage.removeItem(testString);
        return true;
    }
    catch (e) {
        return e instanceof DOMException && (e.code === 22 ||
            e.code === 1014 ||
            e.name === "QuotaExceededError" ||
            e.name === "NS_ERROR_DOM_QUOTA_REACHED") &&
            storage.length !== 0;
    }
}
if (storageAvailable("localStorage") && storageAvailable("sessionStorage")) {
    componentStorage_1.TokenStorage.setStorageAPI(new componentStorage_1.WebStorageComponent(true, window));
}
function jexiaClient() {
    return new client_1.Client(window.fetch.bind(window));
}
exports.jexiaClient = jexiaClient;
function dataOperations() {
    return new dataOperationsModule_1.DataOperationsModule();
}
exports.dataOperations = dataOperations;
function fileOperations(config) {
    if (config === void 0) { config = {}; }
    return new fileOperationsModule_1.FileOperationsModule(new FormData(), config);
}
exports.fileOperations = fileOperations;
function realTime(webSocketBuilder) {
    if (webSocketBuilder === void 0) { webSocketBuilder = function (appUrl) { return new WebSocket(appUrl); }; }
    return new realTimeModule_1.RealTimeModule(webSocketBuilder);
}
exports.realTime = realTime;
function logger(level, modules) {
    return new public_api_1.LoggerModule(level, modules);
}
exports.logger = logger;
__export(require("./api/logger/public-api"));
