import { RequestExecuter } from "../../internal/executer";
import { ClientConfiguration } from "../core/client";
import { AuthOptions } from "../core/tokenManager";
import { FilesetName } from "./fileops.interfaces";
import { Fileset } from "./fileset";
import { FileUploader } from "./fileUploader";
const defaultConfiguration = {
    uploadWaitForCompleted: false,
    uploadTimeout: 120000
};
export class FileOperationsModule {
    constructor(formData, config) {
        this.formData = formData;
        this.config = Object.assign(defaultConfiguration, config);
    }
    init(coreInjector) {
        this.injector = coreInjector.resolveAndCreateChild([
            RequestExecuter,
        ]);
        if (this.config.uploadWaitForCompleted) {
            const isRTCModuleActive = Boolean(this.injector.get(ClientConfiguration).rtc);
            if (!isRTCModuleActive) {
                return Promise.reject("RTC module needs to be activated for automatic file uploading subscription");
            }
        }
        return Promise.resolve(this);
    }
    getConfig() {
        return { fileOperations: this.config };
    }
    fileset(fileset, auth) {
        const config = this.injector.get(AuthOptions);
        if (auth) {
            config.auth = auth;
        }
        const injector = this.injector.resolveAndCreateChild([
            {
                provide: FilesetName,
                useValue: fileset,
            },
            {
                provide: AuthOptions,
                useValue: config,
            },
            FileUploader,
            Fileset,
        ]);
        injector.get(FileUploader).provideFormData(this.formData);
        return injector.get(Fileset);
    }
    filesets(filesets, auth) {
        return filesets.map((fileset) => this.fileset(fileset, auth));
    }
    terminate() {
        return Promise.resolve(this);
    }
}
