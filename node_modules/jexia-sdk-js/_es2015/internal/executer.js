var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Inject, Injectable } from "injection-js";
import { combineLatest, from } from "rxjs";
import { map, switchMap } from "rxjs/operators";
import { ClientInit } from "../api/core/client";
import { ResourceType } from "../api/core/resource";
import { AuthOptions, TokenManager } from "../api/core/tokenManager";
import { API } from "../config";
import { RequestAdapter, RequestMethod } from "./requestAdapter";
const resourceEndpoints = {
    [ResourceType.Dataset]: API.DATA.ENDPOINT,
    [ResourceType.Fileset]: API.FILES.ENDPOINT,
    [ResourceType.Channel]: API.CHANNEL.ENDPOINT,
    [ResourceType.Users]: API.UMS.ENDPOINT
};
let RequestExecuter = class RequestExecuter {
    constructor(config, systemInit, requestAdapter, tokenManager) {
        this.config = config;
        this.systemInit = systemInit;
        this.requestAdapter = requestAdapter;
        this.tokenManager = tokenManager;
    }
    executeRequest(request) {
        const URI = this.getUrl(request) + this.parseQueryParams(request);
        return combineLatest([
            from(this.systemInit),
            this.getRequestOptions(request),
        ]).pipe(switchMap(([, options]) => this.requestAdapter.execute(URI, options)));
    }
    getRequestOptions(request) {
        return this.tokenManager.token(this.config.auth).pipe(map((token) => {
            const options = {
                headers: { Authorization: `Bearer ${token}` },
                method: request.method,
            };
            if (this.hasBody(request)) {
                options.body = request.body;
            }
            return options;
        }));
    }
    hasBody({ method }) {
        return ![RequestMethod.GET, RequestMethod.DELETE].includes(method);
    }
    parseQueryParams({ queryParams = [] }) {
        if (!queryParams.length) {
            return "";
        }
        const encodeValue = (v) => encodeURIComponent(typeof v === "string" ? v : JSON.stringify(v));
        const toQueryParam = ({ key, value }) => `${key}=${encodeValue(value)}`;
        return "?" + queryParams
            .map(toQueryParam)
            .join("&");
    }
    getUrl({ resourceType, resourceName }) {
        const endpoint = resourceEndpoints[resourceType];
        return [
            `${API.PROTOCOL}://${this.config.projectID}.${API.HOST}.${API.DOMAIN}:${API.PORT}`,
            endpoint,
            resourceName,
        ].join("/");
    }
};
RequestExecuter = __decorate([
    Injectable(),
    __param(0, Inject(AuthOptions)),
    __param(1, Inject(ClientInit)),
    __metadata("design:paramtypes", [Object, Promise, RequestAdapter,
        TokenManager])
], RequestExecuter);
export { RequestExecuter };
