"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var config_1 = require("../../config");
var executer_1 = require("../../internal/executer");
var requestAdapter_1 = require("../../internal/requestAdapter");
var deleteQuery_1 = require("../core/queries/deleteQuery");
var selectQuery_1 = require("../core/queries/selectQuery");
var updateQuery_1 = require("../core/queries/updateQuery");
var resource_1 = require("../core/resource");
var tokenManager_1 = require("../core/tokenManager");
var UMSModule = (function () {
    function UMSModule() {
        this.name = "users";
        this.resourceType = resource_1.ResourceType.Users;
        if (!(this instanceof UMSModule)) {
            throw new Error("UMS module initialized incorrectly, you need to include 'new'");
        }
    }
    UMSModule.prototype.init = function (coreInjector) {
        var injector = coreInjector.resolveAndCreateChild([executer_1.RequestExecuter]);
        this.tokenManager = injector.get(tokenManager_1.TokenManager);
        this.requestAdapter = injector.get(requestAdapter_1.RequestAdapter);
        this.projectId = injector.get(tokenManager_1.AuthOptions).projectID;
        this.requestExecuter = injector.get(executer_1.RequestExecuter);
        return Promise.resolve(this);
    };
    Object.defineProperty(UMSModule.prototype, "basePath", {
        get: function () {
            return config_1.API.PROTOCOL + "://" + this.projectId + "." + config_1.API.HOST + "." + config_1.API.DOMAIN + ":" + config_1.API.PORT;
        },
        enumerable: true,
        configurable: true
    });
    UMSModule.prototype.getConfig = function () {
        return { ums: {} };
    };
    UMSModule.prototype.terminate = function () {
        return Promise.resolve(this);
    };
    UMSModule.prototype.signIn = function (user) {
        var _this = this;
        var body = {
            method: "ums",
            email: user.email,
            password: user.password
        };
        return this.requestAdapter.execute(this.getUrl(config_1.API.AUTH, false), { body: body, method: requestAdapter_1.RequestMethod.POST }).pipe(operators_1.map(function (tokens) {
            _this.tokenManager.addTokens([user.email, user.alias], tokens, user.default);
            return tokens.access_token;
        }));
    };
    UMSModule.prototype.signUp = function (credentials, extra) {
        if (extra === void 0) { extra = {}; }
        var body = __assign({ email: credentials.email, password: credentials.password }, extra);
        return this.requestAdapter.execute(this.getUrl(config_1.API.UMS.SIGNUP), { body: body, method: requestAdapter_1.RequestMethod.POST });
    };
    UMSModule.prototype.setDefault = function (alias) {
        this.tokenManager.setDefault(alias);
    };
    UMSModule.prototype.resetDefault = function () {
        this.tokenManager.resetDefault();
    };
    UMSModule.prototype.getUser = function (alias) {
        var _this = this;
        return this.tokenManager.token(alias).pipe(operators_1.switchMap(function (token) { return _this.requestAdapter.execute(_this.getUrl(config_1.API.UMS.USER), { headers: { Authorization: "Bearer " + token } }); }));
    };
    UMSModule.prototype.changePassword = function (alias, oldPassword, newPassword) {
        var _this = this;
        var body = {
            old_password: oldPassword,
            new_password: newPassword,
        };
        return this.tokenManager.token(alias).pipe(operators_1.switchMap(function (token) { return _this.requestAdapter.execute(_this.getUrl(config_1.API.UMS.CHANGEPASSWORD), { body: body, headers: { Authorization: "Bearer " + token }, method: requestAdapter_1.RequestMethod.POST }); }));
    };
    UMSModule.prototype.deleteUser = function (alias, password) {
        var _this = this;
        var body = { password: password };
        return this.tokenManager.token(alias).pipe(operators_1.switchMap(function (token) { return _this.requestAdapter.execute(_this.getUrl(config_1.API.UMS.USER), { body: body, headers: { Authorization: "Bearer " + token }, method: requestAdapter_1.RequestMethod.DELETE }); }));
    };
    UMSModule.prototype.select = function () {
        return new selectQuery_1.SelectQuery(this.requestExecuter, this.resourceType, this.name);
    };
    UMSModule.prototype.update = function (record) {
        return new updateQuery_1.UpdateQuery(this.requestExecuter, record, this.resourceType, this.name);
    };
    UMSModule.prototype.delete = function () {
        return new deleteQuery_1.DeleteQuery(this.requestExecuter, this.resourceType, this.name);
    };
    UMSModule.prototype.requestResetPassword = function (email) {
        return this.requestAdapter.execute(this.getUrl(config_1.API.UMS.RESETPASSWORD), { body: { email: email }, method: requestAdapter_1.RequestMethod.POST });
    };
    UMSModule.prototype.resetPassword = function (resetToken, newPassword) {
        var body = { new_password: newPassword };
        return this.requestAdapter.execute(this.getUrl(config_1.API.UMS.RESETPASSWORD) + ("/" + resetToken), { body: body, method: requestAdapter_1.RequestMethod.POST });
    };
    UMSModule.prototype.getUrl = function (api, ums) {
        if (ums === void 0) { ums = true; }
        var url = this.basePath;
        if (ums) {
            url += "/" + config_1.API.UMS.ENDPOINT;
        }
        return url + "/" + api;
    };
    return UMSModule;
}());
exports.UMSModule = UMSModule;
