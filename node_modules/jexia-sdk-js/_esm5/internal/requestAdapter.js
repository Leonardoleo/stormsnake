var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { from } from "rxjs";
import { map, switchMap, tap } from "rxjs/operators";
import { Logger } from "../api/logger/logger";
import { RequestMethod } from "./requestAdapter.interfaces";
var RequestAdapter = (function () {
    function RequestAdapter(fetch) {
        this.fetch = fetch;
        this.logger = new Logger();
    }
    RequestAdapter.prototype.provideLogger = function (logger) {
        this.logger = logger;
    };
    RequestAdapter.prototype.execute = function (uri, opt) {
        var _this = this;
        var logMessage = "(REQUEST) " + opt.method + " " + uri + " " + JSON.stringify(opt) + "\n";
        var requestOptions = {
            body: JSON.stringify(opt.body),
            headers: opt.headers,
            method: opt.method
        };
        return from(this.fetch(uri, requestOptions)).pipe(tap(function (response) {
            logMessage += "(RESPONSE) " + response.status + " " + response.statusText;
            _this.logger.debug("RequestAdapter", logMessage);
        }), switchMap(function (response) { return _this.handleResponse(response, opt); }));
    };
    RequestAdapter.prototype.upload = function (uri, headers, body) {
        var _this = this;
        var logMessage = "(REQUEST) UPLOAD " + uri + "\n";
        return from(this.fetch(uri, { body: body, headers: headers, method: RequestMethod.POST })).pipe(tap(function (response) {
            logMessage += "(RESPONSE) " + response.status + " " + response.statusText;
            _this.logger.debug("RequestAdapter", logMessage);
        }), switchMap(function (response) { return _this.handleResponse(response, { body: body, headers: headers, method: RequestMethod.POST }); }));
    };
    RequestAdapter.prototype.handleResponse = function (response, request) {
        var _this = this;
        return from(response.text()).pipe(map(function (responseBody) {
            if (response.ok) {
                return responseBody ? JSON.parse(responseBody) : {};
            }
            throw __assign(__assign({}, _this.fetchErrorMessage(responseBody)), { request: request, httpStatus: {
                    code: response.status,
                    status: response.statusText
                } });
        }));
    };
    RequestAdapter.prototype.fetchErrorMessage = function (body) {
        var id = "";
        var message;
        try {
            var parsedBody = JSON.parse(body)[0];
            if (parsedBody.request_id) {
                id = parsedBody.request_id;
            }
            message = parsedBody.message || parsedBody;
        }
        catch (_) {
            message = body;
        }
        return { id: id, message: message };
    };
    return RequestAdapter;
}());
export { RequestAdapter };
export * from "./requestAdapter.interfaces";
