var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { toFilteringCriterion } from "../api/core/filteringApi";
import { MESSAGE } from "../config";
import { toQueryParams } from "./utils";
var Query = (function () {
    function Query() {
        this.fields = [];
        this.orders = [];
    }
    Query.prototype.setFilterCriteria = function (filter) {
        this.filteringConditions = toFilteringCriterion(filter).condition;
    };
    Query.prototype.addSortCondition = function (direction) {
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fields[_i - 1] = arguments[_i];
        }
        if (fields.length === 0) {
            throw new Error(MESSAGE.QUERY.MUST_PROVIDE_SORTING_FIELD);
        }
        this.orders.push({ fields: fields, direction: direction });
    };
    Query.prototype.setAction = function (action, actionResource, filter) {
        this.actionParams = { action: action, actionResource: actionResource, filter: filter };
    };
    Query.prototype.compile = function () {
        var _this = this;
        var compiledQueryOptions = {};
        if (this.filteringConditions) {
            compiledQueryOptions.cond = this.filteringConditions.compile();
        }
        if (this.limit || this.offset) {
            compiledQueryOptions.range = __assign(__assign({}, this.limit ? { limit: this.limit } : {}), this.offset ? { offset: this.offset } : {});
        }
        if (this.fields.length) {
            compiledQueryOptions.outputs = this.fields.map(function (field) { return typeof field === "object" ? _this.compileAggregation(field) : field; });
        }
        if (this.orders.length) {
            compiledQueryOptions.order = this.orders;
        }
        if (this.actionParams) {
            var _a = this.actionParams, action = _a.action, actionResource = _a.actionResource, filter = _a.filter;
            compiledQueryOptions.action = action;
            compiledQueryOptions.action_resource = actionResource;
            compiledQueryOptions.action_cond = toFilteringCriterion(filter).condition.compile();
        }
        return compiledQueryOptions;
    };
    Query.prototype.compileToQueryParams = function () {
        var compiled = this.compile();
        var params = [];
        if (compiled.order) {
            params.push.apply(params, compiled.order.map(function (value) { return ({ key: "order", value: value }); }));
        }
        var order = compiled.order, compiledWithNoOrder = __rest(compiled, ["order"]);
        return params.concat(toQueryParams(compiledWithNoOrder));
    };
    Query.prototype.compileAggregation = function (agg) {
        var _a;
        if (agg.fn === "count" && agg.field === "*") {
            agg.field = "id";
        }
        else if (agg.field === "*") {
            throw new Error("Field name should be provided with the " + agg.fn + "() function");
        }
        return _a = {}, _a[agg.alias || agg.fn] = agg.fn + "(" + agg.field + ")", _a;
    };
    return Query;
}());
export { Query };
