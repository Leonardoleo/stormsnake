var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
import { Inject, Injectable } from "injection-js";
import { combineLatest, from } from "rxjs";
import { map, switchMap } from "rxjs/operators";
import { ClientInit } from "../api/core/client";
import { ResourceType } from "../api/core/resource";
import { AuthOptions, TokenManager } from "../api/core/tokenManager";
import { API } from "../config";
import { RequestAdapter, RequestMethod } from "./requestAdapter";
var resourceEndpoints = (_a = {},
    _a[ResourceType.Dataset] = API.DATA.ENDPOINT,
    _a[ResourceType.Fileset] = API.FILES.ENDPOINT,
    _a[ResourceType.Channel] = API.CHANNEL.ENDPOINT,
    _a[ResourceType.Users] = API.UMS.ENDPOINT,
    _a);
var RequestExecuter = (function () {
    function RequestExecuter(config, systemInit, requestAdapter, tokenManager) {
        this.config = config;
        this.systemInit = systemInit;
        this.requestAdapter = requestAdapter;
        this.tokenManager = tokenManager;
    }
    RequestExecuter.prototype.executeRequest = function (request) {
        var _this = this;
        var URI = this.getUrl(request) + this.parseQueryParams(request);
        return combineLatest([
            from(this.systemInit),
            this.getRequestOptions(request),
        ]).pipe(switchMap(function (_a) {
            var options = _a[1];
            return _this.requestAdapter.execute(URI, options);
        }));
    };
    RequestExecuter.prototype.getRequestOptions = function (request) {
        var _this = this;
        return this.tokenManager.token(this.config.auth).pipe(map(function (token) {
            var options = {
                headers: { Authorization: "Bearer " + token },
                method: request.method,
            };
            if (_this.hasBody(request)) {
                options.body = request.body;
            }
            return options;
        }));
    };
    RequestExecuter.prototype.hasBody = function (_a) {
        var method = _a.method;
        return ![RequestMethod.GET, RequestMethod.DELETE].includes(method);
    };
    RequestExecuter.prototype.parseQueryParams = function (_a) {
        var _b = _a.queryParams, queryParams = _b === void 0 ? [] : _b;
        if (!queryParams.length) {
            return "";
        }
        var encodeValue = function (v) { return encodeURIComponent(typeof v === "string" ? v : JSON.stringify(v)); };
        var toQueryParam = function (_a) {
            var key = _a.key, value = _a.value;
            return key + "=" + encodeValue(value);
        };
        return "?" + queryParams
            .map(toQueryParam)
            .join("&");
    };
    RequestExecuter.prototype.getUrl = function (_a) {
        var resourceType = _a.resourceType, resourceName = _a.resourceName;
        var endpoint = resourceEndpoints[resourceType];
        return [
            API.PROTOCOL + "://" + this.config.projectID + "." + API.HOST + "." + API.DOMAIN + ":" + API.PORT,
            endpoint,
            resourceName,
        ].join("/");
    };
    RequestExecuter = __decorate([
        Injectable(),
        __param(0, Inject(AuthOptions)),
        __param(1, Inject(ClientInit)),
        __metadata("design:paramtypes", [Object, Promise, RequestAdapter,
            TokenManager])
    ], RequestExecuter);
    return RequestExecuter;
}());
export { RequestExecuter };
