"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var injection_js_1 = require("injection-js");
var executer_1 = require("../../internal/executer");
var utils_1 = require("../../internal/utils");
var actionQuery_1 = require("../core/queries/actionQuery");
var deleteQuery_1 = require("../core/queries/deleteQuery");
var insertQuery_1 = require("../core/queries/insertQuery");
var selectQuery_1 = require("../core/queries/selectQuery");
var updateQuery_1 = require("../core/queries/updateQuery");
var resource_1 = require("../core/resource");
var dataops_tokens_1 = require("./dataops.tokens");
var Dataset = (function () {
    function Dataset(datasetName, requestExecuter) {
        this.datasetName = datasetName;
        this.requestExecuter = requestExecuter;
        this.resourceType = resource_1.ResourceType.Dataset;
    }
    Object.defineProperty(Dataset.prototype, "name", {
        get: function () {
            return this.datasetName;
        },
        enumerable: true,
        configurable: true
    });
    Dataset.prototype.select = function () {
        return new selectQuery_1.SelectQuery(this.requestExecuter, resource_1.ResourceType.Dataset, this.datasetName);
    };
    Dataset.prototype.update = function (data) {
        return new updateQuery_1.UpdateQuery(this.requestExecuter, data, resource_1.ResourceType.Dataset, this.datasetName);
    };
    Dataset.prototype.insert = function (data) {
        return new insertQuery_1.InsertQuery(this.requestExecuter, Array.isArray(data) ? data : [data], resource_1.ResourceType.Dataset, this.datasetName);
    };
    Dataset.prototype.delete = function () {
        return new deleteQuery_1.DeleteQuery(this.requestExecuter, resource_1.ResourceType.Dataset, this.datasetName);
    };
    Dataset.prototype.attach = function (resourceName, filter) {
        return new actionQuery_1.ActionQuery(this.requestExecuter, this.resourceType, this.datasetName, resourceName, utils_1.QueryActionType.ATTACH, filter);
    };
    Dataset.prototype.detach = function (resourceName, filter) {
        return new actionQuery_1.ActionQuery(this.requestExecuter, this.resourceType, this.datasetName, resourceName, utils_1.QueryActionType.DETACH, filter);
    };
    Dataset = __decorate([
        injection_js_1.Injectable(),
        __param(0, injection_js_1.Inject(dataops_tokens_1.DataSetName)),
        __metadata("design:paramtypes", [String, executer_1.RequestExecuter])
    ], Dataset);
    return Dataset;
}());
exports.Dataset = Dataset;
Dataset.prototype.watch = function () {
    throw new Error("Import and initialize real time module to use this method!");
};
