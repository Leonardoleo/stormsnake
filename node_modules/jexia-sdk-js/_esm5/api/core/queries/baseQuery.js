var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { Observable } from "rxjs";
import { Query } from "../../../internal/query";
var BaseQuery = (function (_super) {
    __extends(BaseQuery, _super);
    function BaseQuery(queryExecuter, method, resourceType, resourceName) {
        var _this = _super.call(this, function (subscriber) {
            return _this.queryExecuter.executeRequest(_this.compiledRequest).subscribe(subscriber);
        }) || this;
        _this.queryExecuter = queryExecuter;
        _this.method = method;
        _this.resourceType = resourceType;
        _this.resourceName = resourceName;
        _this.query = new Query();
        return _this;
    }
    BaseQuery.prototype.fields = function (field) {
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fields[_i - 1] = arguments[_i];
        }
        this.query.fields = Array.isArray(field) ? field : __spreadArrays([field], fields);
        return this;
    };
    Object.defineProperty(BaseQuery.prototype, "compiledRequest", {
        get: function () {
            return {
                resourceType: this.resourceType,
                resourceName: this.resourceName,
                method: this.method,
                body: this.body || {},
                queryParams: this.query.compileToQueryParams() || [],
            };
        },
        enumerable: true,
        configurable: true
    });
    return BaseQuery;
}(Observable));
export { BaseQuery };
