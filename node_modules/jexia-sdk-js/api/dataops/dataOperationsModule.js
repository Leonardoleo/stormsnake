"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var executer_1 = require("../../internal/executer");
var tokenManager_1 = require("../core/tokenManager");
var dataops_tokens_1 = require("./dataops.tokens");
var dataset_1 = require("./dataset");
var DataOperationsModule = (function () {
    function DataOperationsModule() {
    }
    DataOperationsModule.prototype.init = function (coreInjector) {
        this.injector = coreInjector.resolveAndCreateChild([
            {
                provide: dataops_tokens_1.DataSetName,
                useFactory: function () { throw new Error("Please set the dataset name at the DI"); },
            },
            executer_1.RequestExecuter,
            dataset_1.Dataset,
        ]);
        return Promise.resolve(this);
    };
    DataOperationsModule.prototype.getConfig = function () {
        return { dataOperations: {} };
    };
    DataOperationsModule.prototype.dataset = function (dataset, auth) {
        var config = this.injector.get(tokenManager_1.AuthOptions);
        if (auth) {
            config.auth = auth;
        }
        return this.injector.resolveAndCreateChild([
            {
                provide: dataops_tokens_1.DataSetName,
                useValue: dataset,
            },
            {
                provide: tokenManager_1.AuthOptions,
                useValue: config,
            },
            executer_1.RequestExecuter,
            dataset_1.Dataset,
        ]).get(dataset_1.Dataset);
    };
    DataOperationsModule.prototype.datasets = function (datasets, auth) {
        var _this = this;
        return datasets.map(function (dataset) { return _this.dataset(dataset, auth); });
    };
    DataOperationsModule.prototype.terminate = function () {
        return Promise.resolve(this);
    };
    return DataOperationsModule;
}());
exports.DataOperationsModule = DataOperationsModule;
