var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from "injection-js";
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
    LogLevel[LogLevel["NONE"] = 4] = "NONE";
})(LogLevel || (LogLevel = {}));
const DEFAULT_CONFIG = {
    level: LogLevel.NONE,
    modules: ["all"],
};
let Logger = class Logger {
    constructor() {
        this.level = DEFAULT_CONFIG.level;
        this.modules = DEFAULT_CONFIG.modules;
        this.output = console;
    }
    config(level = DEFAULT_CONFIG.level, modules = DEFAULT_CONFIG.modules, output) {
        this.level = level;
        this.modules = modules;
        if (output) {
            this.output = output;
        }
    }
    debug(module, message) {
        this.log(LogLevel.DEBUG, module, message);
    }
    info(module, message) {
        this.log(LogLevel.INFO, module, message);
    }
    warn(module, message) {
        this.log(LogLevel.WARN, module, message);
    }
    error(module, message) {
        this.log(LogLevel.ERROR, module, message);
    }
    log(l, m, message) {
        if (l >= this.level && (this.modules.includes("all") || this.modules.includes(m))) {
            this.output.log(`[${m} ${Date()}]: ${message}`);
        }
    }
};
Logger = __decorate([
    Injectable()
], Logger);
export { Logger };
