"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var injection_js_1 = require("injection-js");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var config_1 = require("../../config");
var requestAdapter_1 = require("../../internal/requestAdapter");
var logger_1 = require("../logger/logger");
var componentStorage_1 = require("./componentStorage");
var APIKEY_DEFAULT_ALIAS = "apikey";
exports.AuthOptions = new injection_js_1.InjectionToken("IAuthOptions");
function notUndefined(x) {
    return x !== undefined;
}
var TokenManager = (function () {
    function TokenManager(requestAdapter, logger) {
        this.requestAdapter = requestAdapter;
        this.logger = logger;
        this.refreshes = [];
        this.defers = {};
        this.storage = componentStorage_1.TokenStorage.getStorageAPI();
    }
    Object.defineProperty(TokenManager.prototype, "resolved", {
        get: function () {
            return Promise.all(__spreadArrays([
                this.initPromise
            ], Object.values(this.defers)));
        },
        enumerable: true,
        configurable: true
    });
    TokenManager.prototype.token = function (auth) {
        var _this = this;
        return rxjs_1.from(this.resolved).pipe(operators_1.map(function () {
            var tokens = _this.storage.getTokens(auth);
            if (!tokens) {
                throw new Error(config_1.MESSAGE.TokenManager.TOKEN_NOT_AVAILABLE);
            }
            return tokens.access_token;
        }));
    };
    TokenManager.prototype.init = function (opts) {
        var _this = this;
        if (!opts.projectID) {
            return Promise.reject(new Error("Please supply a valid Jexia project ID."));
        }
        this.projectId = opts.projectID;
        this.initPromise = Promise.resolve(this);
        if (opts.key && opts.secret) {
            this.initPromise = this.initPromise
                .then(function () { return _this.login(opts).toPromise(); })
                .then(function () { return _this; });
        }
        return this.initPromise;
    };
    TokenManager.prototype.terminate = function () {
        this.storage.clear();
        this.refreshes.forEach(function (interval) { return clearInterval(interval); });
        this.refreshes = [];
    };
    TokenManager.prototype.setDefault = function (auth) {
        this.storage.setDefault(auth);
    };
    TokenManager.prototype.resetDefault = function () {
        this.storage.setDefault(APIKEY_DEFAULT_ALIAS);
    };
    TokenManager.prototype.addTokens = function (aliases, tokens, defaults) {
        var _this = this;
        var definedAliases = aliases.filter(notUndefined);
        definedAliases.forEach(function (alias, index) {
            _this.storage.setTokens(alias, tokens, !index && defaults);
        });
        this.startRefreshDigest(definedAliases);
    };
    TokenManager.prototype.startRefreshDigest = function (aliases) {
        var _this = this;
        this.refreshes.push(setInterval(function () {
            _this.logger.debug("tokenManager", "refresh " + aliases[0] + " token");
            _this.refresh(aliases)
                .subscribe({ error: function () { return _this.terminate(); } });
        }, config_1.DELAY));
    };
    TokenManager.prototype.login = function (_a) {
        var _this = this;
        var _b = _a.auth, auth = _b === void 0 ? APIKEY_DEFAULT_ALIAS : _b, key = _a.key, secret = _a.secret;
        return this.obtainTokens(auth, this.authUrl, { method: "apk", key: key, secret: secret }).pipe(operators_1.tap(function (tokens) { return _this.addTokens([auth], tokens, true); }));
    };
    TokenManager.prototype.refresh = function (_a) {
        var _this = this;
        var _b = _a === void 0 ? [] : _a, auth = _b[0], restAliases = _b.slice(1);
        var tokens = this.storage.getTokens(auth);
        if (!tokens || !tokens.refresh_token) {
            throw new Error("There is no refresh token for " + auth);
        }
        return this.obtainTokens(auth, this.refreshUrl, { refresh_token: tokens.refresh_token }).pipe(operators_1.tap(function (refreshedTokens) {
            return __spreadArrays([auth], restAliases).forEach(function (alias) { return _this.storage.setTokens(alias, refreshedTokens); });
        }));
    };
    TokenManager.prototype.obtainTokens = function (auth, url, body) {
        var _this = this;
        var resolve;
        this.defers[auth] = new Promise(function (r) { return resolve = r; });
        return this.requestAdapter.execute(url, {
            body: body,
            method: requestAdapter_1.RequestMethod.POST,
        }).pipe(operators_1.tap(function (refreshedTokens) { return resolve(refreshedTokens.access_token); }), operators_1.catchError(function (err) {
            delete _this.defers[auth];
            _this.logger.error("tokenManager", err.message);
            throw new Error("Unable to get tokens: " + err.message);
        }));
    };
    Object.defineProperty(TokenManager.prototype, "url", {
        get: function () {
            return config_1.API.PROTOCOL + "://" + this.projectId + "." + config_1.API.HOST + "." + config_1.API.DOMAIN + ":" + config_1.API.PORT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenManager.prototype, "authUrl", {
        get: function () {
            return this.url + "/" + config_1.API.AUTH;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TokenManager.prototype, "refreshUrl", {
        get: function () {
            return this.url + "/" + config_1.API.REFRESH;
        },
        enumerable: true,
        configurable: true
    });
    TokenManager = __decorate([
        injection_js_1.Injectable(),
        __metadata("design:paramtypes", [requestAdapter_1.RequestAdapter,
            logger_1.Logger])
    ], TokenManager);
    return TokenManager;
}());
exports.TokenManager = TokenManager;
