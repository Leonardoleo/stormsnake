"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var injection_js_1 = require("injection-js");
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["INFO"] = 1] = "INFO";
    LogLevel[LogLevel["WARN"] = 2] = "WARN";
    LogLevel[LogLevel["ERROR"] = 3] = "ERROR";
    LogLevel[LogLevel["NONE"] = 4] = "NONE";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var DEFAULT_CONFIG = {
    level: LogLevel.NONE,
    modules: ["all"],
};
var Logger = (function () {
    function Logger() {
        this.level = DEFAULT_CONFIG.level;
        this.modules = DEFAULT_CONFIG.modules;
        this.output = console;
    }
    Logger.prototype.config = function (level, modules, output) {
        if (level === void 0) { level = DEFAULT_CONFIG.level; }
        if (modules === void 0) { modules = DEFAULT_CONFIG.modules; }
        this.level = level;
        this.modules = modules;
        if (output) {
            this.output = output;
        }
    };
    Logger.prototype.debug = function (module, message) {
        this.log(LogLevel.DEBUG, module, message);
    };
    Logger.prototype.info = function (module, message) {
        this.log(LogLevel.INFO, module, message);
    };
    Logger.prototype.warn = function (module, message) {
        this.log(LogLevel.WARN, module, message);
    };
    Logger.prototype.error = function (module, message) {
        this.log(LogLevel.ERROR, module, message);
    };
    Logger.prototype.log = function (l, m, message) {
        if (l >= this.level && (this.modules.includes("all") || this.modules.includes(m))) {
            this.output.log("[" + m + " " + Date() + "]: " + message);
        }
    };
    Logger = __decorate([
        injection_js_1.Injectable()
    ], Logger);
    return Logger;
}());
exports.Logger = Logger;
