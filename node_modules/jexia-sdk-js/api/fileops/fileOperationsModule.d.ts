import { ReflectiveInjector } from "injection-js";
import { IModule, ModuleConfiguration } from "../core/module";
import { FileOperationsConfig, FilesetInterface, IFormData } from "./fileops.interfaces";
import { Fileset } from "./fileset";
export declare class FileOperationsModule<FormDataType extends IFormData<F>, F> implements IModule {
    private formData;
    private injector;
    private readonly config;
    constructor(formData: FormDataType, config: Partial<FileOperationsConfig>);
    init(coreInjector: ReflectiveInjector): Promise<this>;
    getConfig(): ModuleConfiguration;
    fileset<T extends object = any>(fileset: string, auth?: string): Fileset<FormDataType, T, FilesetInterface<T>, F>;
    filesets<A extends {}, B extends {}>(filesets: [string, string], auth?: string): [Fileset<FormDataType, A, FilesetInterface<A>, F>, Fileset<FormDataType, B, FilesetInterface<B>, F>];
    filesets<A extends {}, B extends {}, C extends {}>(filesets: [string, string, string], auth?: string): [Fileset<FormDataType, A, FilesetInterface<A>, F>, Fileset<FormDataType, B, FilesetInterface<B>, F>, Fileset<FormDataType, C, FilesetInterface<C>, F>];
    filesets<A extends {}, B extends {}, C extends {}, D extends {}>(filesets: [string, string, string, string], auth?: string): [Fileset<FormDataType, A, FilesetInterface<A>, F>, Fileset<FormDataType, B, FilesetInterface<B>, F>, Fileset<FormDataType, C, FilesetInterface<C>, F>, Fileset<FormDataType, D, FilesetInterface<D>, F>];
    filesets<A extends {}, B extends {}, C extends {}, D extends {}, E extends {}>(filesets: [string, string, string, string, string], auth?: string): [Fileset<FormDataType, A, FilesetInterface<A>, F>, Fileset<FormDataType, B, FilesetInterface<B>, F>, Fileset<FormDataType, C, FilesetInterface<C>, F>, Fileset<FormDataType, D, FilesetInterface<D>, F>, Fileset<FormDataType, E, FilesetInterface<E>, F>];
    filesets<A extends {}, B extends {}, C extends {}, D extends {}, E extends {}, G extends {}>(filesets: [string, string, string, string, string, string], auth?: string): [Fileset<FormDataType, A, FilesetInterface<A>, F>, Fileset<FormDataType, B, FilesetInterface<B>, F>, Fileset<FormDataType, C, FilesetInterface<C>, F>, Fileset<FormDataType, D, FilesetInterface<D>, F>, Fileset<FormDataType, E, FilesetInterface<E>, F>, Fileset<FormDataType, G, FilesetInterface<G>, F>];
    filesets(filesets: string[], auth?: string): Array<Fileset<FormDataType, any, FilesetInterface<any>, F>>;
    terminate(): Promise<this>;
}
