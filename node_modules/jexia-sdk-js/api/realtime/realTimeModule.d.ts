import { ReflectiveInjector } from "injection-js";
import { IModule, ModuleConfiguration } from "../core/module";
import { IFormData } from "../fileops/fileops.interfaces";
import { Channel } from "./channel";
import { IWebSocket, IWebSocketBuilder } from "./realTime.interfaces";
import { watch } from "./watch";
declare module "../dataops/dataset" {
    interface Dataset<T> {
        webSocket: IWebSocket;
        watch: typeof watch;
    }
}
declare module "../fileops/fileset" {
    interface Fileset<FormDataType extends IFormData<F>, T, D, F> {
        webSocket: IWebSocket;
        watch: typeof watch;
    }
}
export declare class RealTimeModule implements IModule {
    private websocketBuilder;
    private injector;
    private websocket;
    constructor(websocketBuilder: IWebSocketBuilder);
    init(coreInjector: ReflectiveInjector): Promise<this>;
    getConfig(): {
        [moduleName: string]: ModuleConfiguration;
    };
    channel<T = any>(name: string): Channel<T>;
    terminate(): Promise<this>;
    private buildSocketOpenUri;
}
