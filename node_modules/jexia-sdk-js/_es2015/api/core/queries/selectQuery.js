import { MESSAGE } from "../../../config/message";
import { RequestMethod } from "../../../internal/requestAdapter.interfaces";
import { FilterableQuery } from "./filterableQuery";
import { RelatedQuery } from "./relatedQuery";
export class SelectQuery extends FilterableQuery {
    constructor(queryExecuter, resourceType, resourceName) {
        super(queryExecuter, RequestMethod.GET, resourceType, resourceName);
    }
    limit(limit) {
        this.query.limit = limit;
        return this;
    }
    offset(offset) {
        this.query.offset = offset;
        return this;
    }
    sortAsc(field, ...fields) {
        if (!field || field.length === 0) {
            throw new Error(MESSAGE.QUERY.MUST_PROVIDE_SORTING_FIELD);
        }
        this.query.addSortCondition("asc", ...(Array.isArray(field) ? field : field && [field, ...fields]));
        return this;
    }
    sortDesc(field, ...fields) {
        if (!field || field.length === 0) {
            throw new Error(MESSAGE.QUERY.MUST_PROVIDE_SORTING_FIELD);
        }
        this.query.addSortCondition("desc", ...(Array.isArray(field) ? field : field && [field, ...fields]));
        return this;
    }
    related(resourceName, callback = (related) => {
        this.query.fields.push(resourceName);
        return related;
    }) {
        callback(new RelatedQuery(resourceName, this.query));
        return this;
    }
}
