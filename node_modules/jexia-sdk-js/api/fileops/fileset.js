"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var injection_js_1 = require("injection-js");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var executer_1 = require("../../internal/executer");
var utils_1 = require("../../internal/utils");
var client_1 = require("../core/client");
var actionQuery_1 = require("../core/queries/actionQuery");
var deleteQuery_1 = require("../core/queries/deleteQuery");
var selectQuery_1 = require("../core/queries/selectQuery");
var updateQuery_1 = require("../core/queries/updateQuery");
var resource_1 = require("../core/resource");
var fileops_interfaces_1 = require("../fileops/fileops.interfaces");
var fileUploader_1 = require("../fileops/fileUploader");
var Fileset = (function () {
    function Fileset(filesetName, clientConfig, fileUploader, requestExecuter) {
        this.filesetName = filesetName;
        this.clientConfig = clientConfig;
        this.fileUploader = fileUploader;
        this.requestExecuter = requestExecuter;
        this.resourceType = resource_1.ResourceType.Fileset;
    }
    Object.defineProperty(Fileset.prototype, "name", {
        get: function () {
            return this.filesetName;
        },
        enumerable: true,
        configurable: true
    });
    Fileset.prototype.upload = function (files) {
        var fileUploadObservable = this.fileUploader.upload(files);
        if (this.clientConfig.fileOperations.uploadWaitForCompleted) {
            return this.getFileUpdates(fileUploadObservable, files.length);
        }
        return fileUploadObservable;
    };
    Fileset.prototype.select = function () {
        return new selectQuery_1.SelectQuery(this.requestExecuter, resource_1.ResourceType.Fileset, this.filesetName);
    };
    Fileset.prototype.update = function (data) {
        return new updateQuery_1.UpdateQuery(this.requestExecuter, data, resource_1.ResourceType.Fileset, this.filesetName);
    };
    Fileset.prototype.insert = function () {
        throw new Error("Fileset does not have INSERT, please use upload() instead");
    };
    Fileset.prototype.delete = function () {
        return new deleteQuery_1.DeleteQuery(this.requestExecuter, resource_1.ResourceType.Fileset, this.filesetName);
    };
    Fileset.prototype.attach = function (resourceName, filter) {
        return new actionQuery_1.ActionQuery(this.requestExecuter, this.resourceType, this.filesetName, resourceName, utils_1.QueryActionType.ATTACH, filter);
    };
    Fileset.prototype.detach = function (resourceName, filter) {
        return new actionQuery_1.ActionQuery(this.requestExecuter, this.resourceType, this.filesetName, resourceName, utils_1.QueryActionType.DETACH, filter);
    };
    Fileset.prototype.getFileUpdates = function (uploadingProcess, filesUploaded) {
        var filesCompleted = 0;
        var allFilesCompleted = new rxjs_1.Subject();
        var sharedUploadingProcess = uploadingProcess.pipe(operators_1.shareReplay());
        var watcher = this.watch().pipe(operators_1.takeUntil(allFilesCompleted), operators_1.filter(function (event) { return event.action === "updated"; }), operators_1.concatMap(function (event) { return sharedUploadingProcess.pipe(operators_1.filter(function (fileRecord) { return fileRecord.id === event.data[0].id; }), operators_1.map(function (fileRecord) {
            fileRecord.status = fileops_interfaces_1.IFileStatus.COMPLETED;
            filesCompleted++;
            return fileRecord;
        })); }), operators_1.tap(function () {
            if (filesCompleted === filesUploaded) {
                allFilesCompleted.next();
                allFilesCompleted.complete();
            }
        }));
        return rxjs_1.Observable.create(function (subscriber) {
            var watcherSubscription = watcher.subscribe(subscriber);
            sharedUploadingProcess.subscribe();
            return function () { return watcherSubscription.unsubscribe(); };
        });
    };
    Fileset = __decorate([
        injection_js_1.Injectable(),
        __param(0, injection_js_1.Inject(fileops_interfaces_1.FilesetName)),
        __param(1, injection_js_1.Inject(client_1.ClientConfiguration)),
        __metadata("design:paramtypes", [String, Object, fileUploader_1.FileUploader,
            executer_1.RequestExecuter])
    ], Fileset);
    return Fileset;
}());
exports.Fileset = Fileset;
