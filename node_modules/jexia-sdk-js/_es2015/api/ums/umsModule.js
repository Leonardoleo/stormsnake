import { map, switchMap } from "rxjs/operators";
import { API } from "../../config";
import { RequestExecuter } from "../../internal/executer";
import { RequestAdapter, RequestMethod } from "../../internal/requestAdapter";
import { DeleteQuery } from "../core/queries/deleteQuery";
import { SelectQuery } from "../core/queries/selectQuery";
import { UpdateQuery } from "../core/queries/updateQuery";
import { ResourceType } from "../core/resource";
import { AuthOptions, TokenManager } from "../core/tokenManager";
export class UMSModule {
    constructor() {
        this.name = "users";
        this.resourceType = ResourceType.Users;
        if (!(this instanceof UMSModule)) {
            throw new Error("UMS module initialized incorrectly, you need to include 'new'");
        }
    }
    init(coreInjector) {
        const injector = coreInjector.resolveAndCreateChild([RequestExecuter]);
        this.tokenManager = injector.get(TokenManager);
        this.requestAdapter = injector.get(RequestAdapter);
        this.projectId = injector.get(AuthOptions).projectID;
        this.requestExecuter = injector.get(RequestExecuter);
        return Promise.resolve(this);
    }
    get basePath() {
        return `${API.PROTOCOL}://${this.projectId}.${API.HOST}.${API.DOMAIN}:${API.PORT}`;
    }
    getConfig() {
        return { ums: {} };
    }
    terminate() {
        return Promise.resolve(this);
    }
    signIn(user) {
        const body = {
            method: "ums",
            email: user.email,
            password: user.password
        };
        return this.requestAdapter.execute(this.getUrl(API.AUTH, false), { body, method: RequestMethod.POST }).pipe(map((tokens) => {
            this.tokenManager.addTokens([user.email, user.alias], tokens, user.default);
            return tokens.access_token;
        }));
    }
    signUp(credentials, extra = {}) {
        const body = Object.assign({ email: credentials.email, password: credentials.password }, extra);
        return this.requestAdapter.execute(this.getUrl(API.UMS.SIGNUP), { body, method: RequestMethod.POST });
    }
    setDefault(alias) {
        this.tokenManager.setDefault(alias);
    }
    resetDefault() {
        this.tokenManager.resetDefault();
    }
    getUser(alias) {
        return this.tokenManager.token(alias).pipe(switchMap((token) => this.requestAdapter.execute(this.getUrl(API.UMS.USER), { headers: { Authorization: `Bearer ${token}` } })));
    }
    changePassword(alias, oldPassword, newPassword) {
        const body = {
            old_password: oldPassword,
            new_password: newPassword,
        };
        return this.tokenManager.token(alias).pipe(switchMap((token) => this.requestAdapter.execute(this.getUrl(API.UMS.CHANGEPASSWORD), { body, headers: { Authorization: `Bearer ${token}` }, method: RequestMethod.POST })));
    }
    deleteUser(alias, password) {
        const body = { password };
        return this.tokenManager.token(alias).pipe(switchMap((token) => this.requestAdapter.execute(this.getUrl(API.UMS.USER), { body, headers: { Authorization: `Bearer ${token}` }, method: RequestMethod.DELETE })));
    }
    select() {
        return new SelectQuery(this.requestExecuter, this.resourceType, this.name);
    }
    update(record) {
        return new UpdateQuery(this.requestExecuter, record, this.resourceType, this.name);
    }
    delete() {
        return new DeleteQuery(this.requestExecuter, this.resourceType, this.name);
    }
    requestResetPassword(email) {
        return this.requestAdapter.execute(this.getUrl(API.UMS.RESETPASSWORD), { body: { email }, method: RequestMethod.POST });
    }
    resetPassword(resetToken, newPassword) {
        const body = { new_password: newPassword };
        return this.requestAdapter.execute(this.getUrl(API.UMS.RESETPASSWORD) + `/${resetToken}`, { body, method: RequestMethod.POST });
    }
    getUrl(api, ums = true) {
        let url = this.basePath;
        if (ums) {
            url += `/${API.UMS.ENDPOINT}`;
        }
        return `${url}/${api}`;
    }
}
