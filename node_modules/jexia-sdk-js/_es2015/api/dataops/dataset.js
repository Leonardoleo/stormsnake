var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Inject, Injectable } from "injection-js";
import { RequestExecuter } from "../../internal/executer";
import { QueryActionType } from "../../internal/utils";
import { ActionQuery } from "../core/queries/actionQuery";
import { DeleteQuery } from "../core/queries/deleteQuery";
import { InsertQuery } from "../core/queries/insertQuery";
import { SelectQuery } from "../core/queries/selectQuery";
import { UpdateQuery } from "../core/queries/updateQuery";
import { ResourceType } from "../core/resource";
import { DataSetName } from "./dataops.tokens";
let Dataset = class Dataset {
    constructor(datasetName, requestExecuter) {
        this.datasetName = datasetName;
        this.requestExecuter = requestExecuter;
        this.resourceType = ResourceType.Dataset;
    }
    get name() {
        return this.datasetName;
    }
    select() {
        return new SelectQuery(this.requestExecuter, ResourceType.Dataset, this.datasetName);
    }
    update(data) {
        return new UpdateQuery(this.requestExecuter, data, ResourceType.Dataset, this.datasetName);
    }
    insert(data) {
        return new InsertQuery(this.requestExecuter, Array.isArray(data) ? data : [data], ResourceType.Dataset, this.datasetName);
    }
    delete() {
        return new DeleteQuery(this.requestExecuter, ResourceType.Dataset, this.datasetName);
    }
    attach(resourceName, filter) {
        return new ActionQuery(this.requestExecuter, this.resourceType, this.datasetName, resourceName, QueryActionType.ATTACH, filter);
    }
    detach(resourceName, filter) {
        return new ActionQuery(this.requestExecuter, this.resourceType, this.datasetName, resourceName, QueryActionType.DETACH, filter);
    }
};
Dataset = __decorate([
    Injectable(),
    __param(0, Inject(DataSetName)),
    __metadata("design:paramtypes", [String, RequestExecuter])
], Dataset);
export { Dataset };
Dataset.prototype.watch = () => {
    throw new Error("Import and initialize real time module to use this method!");
};
