import { RequestExecuter } from "../../internal/executer";
import { AuthOptions } from "../core/tokenManager";
import { DataSetName } from "./dataops.tokens";
import { Dataset } from "./dataset";
var DataOperationsModule = (function () {
    function DataOperationsModule() {
    }
    DataOperationsModule.prototype.init = function (coreInjector) {
        this.injector = coreInjector.resolveAndCreateChild([
            {
                provide: DataSetName,
                useFactory: function () { throw new Error("Please set the dataset name at the DI"); },
            },
            RequestExecuter,
            Dataset,
        ]);
        return Promise.resolve(this);
    };
    DataOperationsModule.prototype.getConfig = function () {
        return { dataOperations: {} };
    };
    DataOperationsModule.prototype.dataset = function (dataset, auth) {
        var config = this.injector.get(AuthOptions);
        if (auth) {
            config.auth = auth;
        }
        return this.injector.resolveAndCreateChild([
            {
                provide: DataSetName,
                useValue: dataset,
            },
            {
                provide: AuthOptions,
                useValue: config,
            },
            RequestExecuter,
            Dataset,
        ]).get(Dataset);
    };
    DataOperationsModule.prototype.datasets = function (datasets, auth) {
        var _this = this;
        return datasets.map(function (dataset) { return _this.dataset(dataset, auth); });
    };
    DataOperationsModule.prototype.terminate = function () {
        return Promise.resolve(this);
    };
    return DataOperationsModule;
}());
export { DataOperationsModule };
