import { ReflectiveInjector } from "injection-js";
import { Observable } from "rxjs";
import { IModule, ModuleConfiguration } from "../core/module";
import { DeleteQuery } from "../core/queries/deleteQuery";
import { SelectQuery } from "../core/queries/selectQuery";
import { UpdateQuery } from "../core/queries/updateQuery";
import { DefaultResourceInterface, ResourceType } from "../core/resource";
export interface IUMSSignInOptions {
    email: string;
    password: string;
    default?: boolean;
    alias?: string;
}
export declare type IUMSCredentials = Pick<IUMSSignInOptions, "email" | "password">;
export declare type IUMSExtraFields = Omit<{
    [key: string]: any;
}, "email" | "password">;
export declare type DefaultUsersInterface = {
    email: string;
    active: boolean;
};
export declare type UsersInterface<T> = T & DefaultResourceInterface & DefaultUsersInterface;
export declare class UMSModule<T extends object = any, D extends UsersInterface<T> = UsersInterface<T>> implements IModule {
    readonly name = "users";
    readonly resourceType = ResourceType.Users;
    private tokenManager;
    private requestAdapter;
    private requestExecuter;
    private projectId;
    constructor();
    init(coreInjector: ReflectiveInjector): Promise<this>;
    readonly basePath: string;
    getConfig(): {
        [moduleName: string]: ModuleConfiguration;
    };
    terminate(): Promise<this>;
    signIn(user: IUMSSignInOptions): Observable<string>;
    signUp(credentials: IUMSCredentials, extra?: IUMSExtraFields): Observable<D>;
    setDefault(alias: string): void;
    resetDefault(): void;
    getUser(alias: string): Observable<D>;
    changePassword(alias: string, oldPassword: string, newPassword: string): Observable<D>;
    deleteUser(alias: string, password: string): Observable<void>;
    select(): SelectQuery<D>;
    update(record: Partial<D>): UpdateQuery<D>;
    delete(): DeleteQuery<D>;
    requestResetPassword(email: string): Observable<D>;
    resetPassword(resetToken: string, newPassword: string): Observable<D>;
    private getUrl;
}
