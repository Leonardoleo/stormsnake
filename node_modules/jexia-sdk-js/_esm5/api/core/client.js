var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { InjectionToken, ReflectiveInjector } from "injection-js";
import { RequestAdapter } from "../../internal/requestAdapter";
import { deferPromise } from "../../internal/utils";
import { Logger } from "../logger/logger";
import { AuthOptions, TokenManager } from "./tokenManager";
export var ClientInit = new InjectionToken("SystemInit");
export var ClientConfiguration = new InjectionToken("ClientConfiguration");
var Client = (function () {
    function Client(fetch) {
        this.fetch = fetch;
    }
    Client.prototype.init = function (opts) {
        var _this = this;
        var modules = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            modules[_i - 1] = arguments[_i];
        }
        var systemDefer = deferPromise();
        var injector = ReflectiveInjector.resolveAndCreate([
            {
                provide: ClientInit,
                useValue: systemDefer.promise,
            },
            {
                provide: ClientConfiguration,
                useFactory: function () { return _this.collectConfiguration(modules); },
            },
            {
                provide: AuthOptions,
                useValue: opts,
            },
            {
                provide: RequestAdapter,
                useFactory: function () { return new RequestAdapter(_this.fetch); },
            },
            Logger,
            TokenManager,
        ]);
        this.tokenManager = injector.get(TokenManager);
        injector.get(RequestAdapter).provideLogger(injector.get(Logger));
        this.modules = modules;
        var parallel = __spreadArrays([
            this.tokenManager.init(opts)
        ], modules.map(function (m) { return m.init(injector); }));
        Promise.all(parallel)
            .then(function () { return _this; })
            .catch(function (err) {
            _this.tokenManager.terminate();
            throw err;
        })
            .then(systemDefer.resolve, systemDefer.reject);
        return systemDefer.promise;
    };
    Client.prototype.terminate = function () {
        var _this = this;
        this.tokenManager.terminate();
        var promises = this.modules.map(function (m) { return m.terminate(); });
        return Promise.all(promises)
            .then(function () { return _this; });
    };
    Client.prototype.collectConfiguration = function (modules) {
        return Object.assign.apply(Object, __spreadArrays([{}], modules.map(function (module) { return module.getConfig(); })));
    };
    return Client;
}());
export { Client };
