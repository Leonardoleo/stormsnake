"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var injection_js_1 = require("injection-js");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var config_1 = require("../../config");
var requestAdapter_1 = require("../../internal/requestAdapter");
var tokenManager_1 = require("../core/tokenManager");
var fileops_interfaces_1 = require("./fileops.interfaces");
var FileUploader = (function () {
    function FileUploader(config, filesetName, tokenManager, requestAdapter) {
        this.config = config;
        this.filesetName = filesetName;
        this.tokenManager = tokenManager;
        this.requestAdapter = requestAdapter;
    }
    FileUploader.prototype.provideFormData = function (formData) {
        this.formData = this.resetFormData(formData);
    };
    FileUploader.prototype.upload = function (files) {
        var _this = this;
        return rxjs_1.merge.apply(void 0, files.map(function (file) { return _this.uploadFile(file); }));
    };
    FileUploader.prototype.uploadFile = function (record) {
        var _this = this;
        var formData = this.resetFormData();
        formData.append("data", record.data ? JSON.stringify(record.data) : "{}");
        if (record.file) {
            formData.append("file", record.file);
        }
        return this.tokenManager.token(this.config.auth).pipe(operators_1.switchMap(function (token) { return _this.execute(token, formData); }), operators_1.map(function (_a) {
            var uploaded = _a[0];
            return uploaded;
        }));
    };
    FileUploader.prototype.execute = function (token, formData) {
        var headers = {
            Authorization: "Bearer " + token,
        };
        if (formData.getHeaders) {
            Object.assign(headers, formData.getHeaders());
        }
        return this.requestAdapter.upload(this.getUrl(), headers, formData);
    };
    ;
    FileUploader.prototype.getUrl = function () {
        return [
            config_1.API.PROTOCOL + "://" + this.config.projectID + "." + config_1.API.HOST + "." + config_1.API.DOMAIN + ":" + config_1.API.PORT,
            config_1.API.FILES.ENDPOINT,
            this.filesetName,
        ].join("/");
    };
    FileUploader.prototype.resetFormData = function (formData) {
        if (formData === void 0) { formData = this.formData; }
        return new formData.constructor();
    };
    FileUploader = __decorate([
        injection_js_1.Injectable(),
        __param(0, injection_js_1.Inject(tokenManager_1.AuthOptions)),
        __param(1, injection_js_1.Inject(fileops_interfaces_1.FilesetName)),
        __metadata("design:paramtypes", [Object, String, tokenManager_1.TokenManager,
            requestAdapter_1.RequestAdapter])
    ], FileUploader);
    return FileUploader;
}());
exports.FileUploader = FileUploader;
