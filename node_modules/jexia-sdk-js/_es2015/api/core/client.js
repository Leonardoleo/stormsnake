import { InjectionToken, ReflectiveInjector } from "injection-js";
import { RequestAdapter } from "../../internal/requestAdapter";
import { deferPromise } from "../../internal/utils";
import { Logger } from "../logger/logger";
import { AuthOptions, TokenManager } from "./tokenManager";
export const ClientInit = new InjectionToken("SystemInit");
export const ClientConfiguration = new InjectionToken("ClientConfiguration");
export class Client {
    constructor(fetch) {
        this.fetch = fetch;
    }
    init(opts, ...modules) {
        const systemDefer = deferPromise();
        const injector = ReflectiveInjector.resolveAndCreate([
            {
                provide: ClientInit,
                useValue: systemDefer.promise,
            },
            {
                provide: ClientConfiguration,
                useFactory: () => this.collectConfiguration(modules),
            },
            {
                provide: AuthOptions,
                useValue: opts,
            },
            {
                provide: RequestAdapter,
                useFactory: () => new RequestAdapter(this.fetch),
            },
            Logger,
            TokenManager,
        ]);
        this.tokenManager = injector.get(TokenManager);
        injector.get(RequestAdapter).provideLogger(injector.get(Logger));
        this.modules = modules;
        const parallel = [
            this.tokenManager.init(opts),
            ...modules.map((m) => m.init(injector)),
        ];
        Promise.all(parallel)
            .then(() => this)
            .catch((err) => {
            this.tokenManager.terminate();
            throw err;
        })
            .then(systemDefer.resolve, systemDefer.reject);
        return systemDefer.promise;
    }
    terminate() {
        this.tokenManager.terminate();
        const promises = this.modules.map((m) => m.terminate());
        return Promise.all(promises)
            .then(() => this);
    }
    collectConfiguration(modules) {
        return Object.assign({}, ...modules.map((module) => module.getConfig()));
    }
}
