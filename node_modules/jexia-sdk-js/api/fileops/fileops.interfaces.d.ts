import { InjectionToken } from "injection-js";
import { ModuleConfiguration } from "../core/module";
export declare type FileOperationsConfig = ModuleConfiguration & {
    uploadWaitForCompleted: boolean;
    uploadTimeout: number;
};
export declare const FilesetName: InjectionToken<string>;
export interface IFormData<F> {
    append: (name: string, value: string | F, filename?: string) => void;
    getHeaders?: () => {
        [key: string]: string;
    };
}
export declare type DefaultFilesetFields = "id" | "size" | "name" | "created_at" | "updated_at";
export declare enum IFileStatus {
    IN_PROGRESS = "in_progress",
    COMPLETED = "completed",
    ERROR = "error"
}
export declare type DefaultFilesetInterface = {
    [P in DefaultFilesetFields]: string;
} & {
    status: IFileStatus;
};
export declare type FilesetInterface<T> = T & DefaultFilesetInterface;
export declare type FilesetMultipart<T, F> = {
    data?: FilesetInterface<T>;
    file?: F;
};
