"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../internal/utils");
var FilteringCondition = (function () {
    function FilteringCondition(field, operator, value) {
        this.field = field;
        this.operator = operator;
        this.value = value;
        this.isSingle = true;
        this.logicalOperatorType = "and";
    }
    Object.defineProperty(FilteringCondition.prototype, "type", {
        get: function () {
            return this.logicalOperatorType;
        },
        set: function (type) {
            this.logicalOperatorType = type;
        },
        enumerable: true,
        configurable: true
    });
    FilteringCondition.prototype.or = function (condition) {
        return new CompositeFilteringCondition(this, "and").or(condition);
    };
    FilteringCondition.prototype.and = function (condition) {
        return new CompositeFilteringCondition(this, "and").and(condition);
    };
    FilteringCondition.prototype.compile = function () {
        return [
            { field: this.field },
            this.operator,
            this.value,
        ];
    };
    return FilteringCondition;
}());
exports.FilteringCondition = FilteringCondition;
var CompositeFilteringCondition = (function () {
    function CompositeFilteringCondition(filteringCondition, logicalOperatorType) {
        this.isSingle = false;
        this.conditions = [filteringCondition];
        this.logicalOperatorType = logicalOperatorType;
    }
    Object.defineProperty(CompositeFilteringCondition.prototype, "type", {
        get: function () {
            return this.logicalOperatorType;
        },
        set: function (type) {
            this.logicalOperatorType = type;
        },
        enumerable: true,
        configurable: true
    });
    CompositeFilteringCondition.prototype.or = function (condition) {
        this.appendCondition(condition, "or");
        return this;
    };
    CompositeFilteringCondition.prototype.and = function (condition) {
        this.appendCondition(condition, "and");
        return this;
    };
    CompositeFilteringCondition.prototype.compile = function () {
        return this.conditions.reduce(this.toCompiledConditions, []);
    };
    CompositeFilteringCondition.prototype.toCompiledConditions = function (expressions, condition) {
        if (expressions.length) {
            expressions.push(condition.type);
        }
        var compiledCondition = condition.compile();
        if (condition.isSingle) {
            expressions.push.apply(expressions, compiledCondition);
        }
        else {
            expressions.push(compiledCondition);
        }
        return expressions;
    };
    CompositeFilteringCondition.prototype.appendCondition = function (condition, operator) {
        var newCondition = utils_1.clone(condition);
        newCondition.type = operator;
        this.conditions.push(newCondition);
    };
    return CompositeFilteringCondition;
}());
exports.CompositeFilteringCondition = CompositeFilteringCondition;
